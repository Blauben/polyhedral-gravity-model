Python API
==========

polyhedral_gravity
------------------

Computes the full gravity tensor for a given constant density polyhedron which consists of some
vertices and triangular faces at given computation points

.. py:module:: polyhedral_gravity

    .. py:function:: evaluate(polyhedral_source, density, computation_points, parallel=True)

        Evaluates the polyhedral gravity model for a given constant density polyhedron at a given computation point.

        :param Union[Tuple[List[List[float[3]]], List[List[int[3]]]], List[str]] polyhedral_source:
            The vertices & faces of the polyhedron as tuple or
            the filenames of the files containing the vertices & faces as list of strings
            Supports numpy arrays!
            Supported are .node/.face, mesh, .ply, .off, .stl files.
        :param float density:
            The constant density of the polyhedron in :math:`\frac{kg}{m^3}`
        :param List[float[3]] computation_points:
            The cartesian computation points as tuple or list of points
        :param bool parallel:
            If true, the computation is done in parallel (default: true)

        :rtype: Union[Tuple[float, List[float[3]], List[float[6]]], List[Tuple[float, List[float[3]], List[float[6]]]]]
        :return:
            Either a tuple of potential :math:`V`, acceleration (:math:`V_x, V_y, V_z`)
            and second derivatives (:math:`V_{xx}, V_{yy}, V_{zz}, V_{xy}, V_{xz}, V_{yz}`)
            at the computation points or if multiple computation points are given, the result is a list of tuples


    .. py:class:: GravityEvaluable

        A class to evaluate the polyhedral gravity model for a given constant density polyhedron at a given computation point.
        It provides a :code:`__call__` method to evaluate the polyhedral gravity model for computation points while
        also caching the polyhedron data over the lifetime of the object.

        .. py:method:: __init__(polyhedral_source, density)

            :param Union[Tuple[List[List[float[3]]], List[List[int[3]]]], List[str]] polyhedral_source:
                The vertices & faces as (N, 3) array-like of the polyhedron as tuple or
                the filenames of the files containing the vertices & faces as list of strings
                Supports numpy arrays!
                Supported are .node/.face, mesh, .ply, .off, .stl files.
            :param float density:
                The constant density of the polyhedron in :math:`\frac{kg}{m^3}`

        .. py:method:: __call__(computation_points, parallel=True)

            Evaluates the polyhedral gravity model for a given constant density polyhedron at a given computation point.

            :param List[float[3]] computation_points:
                The cartesian computation point
            :param bool parallel:
                If true, the computation is done in parallel (default: true)

            :rtype: Tuple[float, List[float[3]], List[float[6]]]
            :return:
                A tuple of potential :math:`V`, acceleration (:math:`V_x, V_y, V_z`)
                and second derivatives (:math:`V_{xx}, V_{yy}, V_{zz}, V_{xy}, V_{xz}, V_{yz}`)
                at the computation point.

        .. py:method:: __repr__()

            Returns a string representation of the polyhedral gravity evaluable.

            :rtype: str
            :return: A string representation of the polyhedron


.. _mesh-checking-python:

utility
~~~~~~~

.. py:module:: polyhedral_gravity.utility

This submodule contains useful utility functions like parsing meshes
or checking if the polyhedron's mesh plane unit normals point outwards
like it is required by the polyhedral-gravity model.

.. py:function:: read(input_files)
    :noindex:

    Reads a polyhedron from a mesh file. The vertices and faces are read from input
    files (either .node/.face, mesh, .ply, .off, .stl). File-Order matters in case of the first option!

    :param List[str] input_files: polyhedral source files
    :return: tuple of vertices (N, 3) (floats) and faces (N, 3) (ints)
    :rtype: Tuple[List[List[float[3]]], List[List[int[3]]]]

.. py:function:: check_mesh(vertices, faces)
    :noindex:

    Checks if no triangles of the polyhedral mesh are degenerated by checking that their surface area
    is greater zero.
    Further, Checks if all the polyhedron's plane unit normals are pointing outwards.

    :param List[List[float[3]]] vertices: vertices of the polyhedron
    :param List[List[int[3]]] faces: faces of the polyhedron
    :return: True if no triangle is degenerate and the polyhedron's plane unit normals are all pointing outwards.
    :rtype: Bool

    .. note::
        This method has quadratic runtime complexity :math:`O(n^2)`

.. py:function:: check_mesh(input_files)
    :noindex:

    Checks if no triangles of the polyhedral mesh are degenerate by checking that their surface area
    is greater zero.
    Further, Checks if all the polyhedron's plane unit normals are pointing outwards.
    Reads a polyhedron from a mesh file. The vertices and faces are read from input
    files (either .node/.face, mesh, .ply, .off, .stl). File-Order matters in case of the first option!

    :param List[str] input_files: polyhedral source files
    :return: True if no triangle is degenerate and the polyhedron's plane unit normals are all pointing outwards.
    :rtype: Bool

    .. note::
        This method has quadratic runtime complexity :math:`O(n^2)`.

